name: 构建并发布Docker镜像

on:
  push:
    tags:
      - 'v*'  # 匹配 v1.0.0, v2.1.3 等版本标签

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: raygo-sub

jobs:
  # AMD64 构建任务
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag,suffix=-amd64
          type=semver,pattern={{version}},suffix=-amd64

    - name: 构建并推送AMD64镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=amd64
        cache-to: type=gha,mode=max,scope=amd64

  # ARM64 构建任务
  build-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag,suffix=-arm64
          type=semver,pattern={{version}},suffix=-arm64

    - name: 构建并推送ARM64镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=arm64
        cache-to: type=gha,mode=max,scope=arm64

  # 合并多架构镜像
  merge-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 创建并推送多架构清单
      run: |
        # 提取版本标签
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="latest"
        fi
        
        # 定义镜像地址
        REGISTRY="${{ env.REGISTRY }}"
        REPO="${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
        
        echo "🔧 创建多架构清单"
        echo "版本: $VERSION"
        echo "AMD64镜像: $REGISTRY/$REPO:$VERSION-amd64"
        echo "ARM64镜像: $REGISTRY/$REPO:$VERSION-arm64"
        echo "目标清单: $REGISTRY/$REPO:$VERSION"
        
        # 创建多架构清单
        docker buildx imagetools create \
          --tag $REGISTRY/$REPO:$VERSION \
          $REGISTRY/$REPO:$VERSION-amd64 \
          $REGISTRY/$REPO:$VERSION-arm64
        
        # 如果是版本标签，还创建latest
        if [[ "$VERSION" != "latest" ]] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "🔄 创建latest标签"
          docker buildx imagetools create \
            --tag $REGISTRY/$REPO:latest \
            $REGISTRY/$REPO:$VERSION-amd64 \
            $REGISTRY/$REPO:$VERSION-arm64
        fi

    - name: 输出镜像信息
      run: |
        echo "🎉 多架构镜像构建完成！"
        echo ""
        echo "📦 镜像标签："
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
        echo ""
        echo "🚀 使用方法："
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "  docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION"
        fi
        echo "  docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "🏗️  支持架构："
        echo "  - linux/amd64"
        echo "  - linux/arm64"
        echo ""
        echo "📋 架构特定镜像："
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "  - ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION-amd64"
          echo "  - ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:$VERSION-arm64"
        fi 